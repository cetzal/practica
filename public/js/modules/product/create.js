/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 14);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/modules/product/create.js":
/*!************************************************!*\
  !*** ./resources/js/modules/product/create.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function () {\n  var host = window.location.origin;\n  function formatErrorUsingClassesAndPopover(element, array_of_problems) {\n    var someHTML = '';\n    array_of_problems.forEach(function (e) {\n      someHTML += '<li>' + element + ': ' + e + '</li>';\n    });\n    // $('#'+element+'_error_section').html('<ul>'+someHTML+'</ul>');\n    // $('#'+element).addClass('is-invalid');\n\n    return '<ul>' + someHTML + '</ul><br>';\n  }\n  $(\"#promotion_price\").hide();\n  $(\"#start_date\").hide();\n  $(\"#last_date\").hide();\n\n  // $('[data-toggle=\"tooltip\"]').tooltip(); \n\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $('#genbutton').on(\"click\", function () {\n    $.get(host + '/api/product/gencode', function (data) {\n      $(\"input[name='code']\").val(data);\n    });\n  });\n  $(\"input[name='code']\").on('blur', function () {\n    $.get(host + '/api/product/code', {\n      code: $(\"input[name='code']\").val()\n    }).done(function (data) {\n      console.log(\"Solicitud GET exitosa:\", data);\n    }).fail(function (jqXHR, textStatus, errorThrown) {\n      var message = '';\n      $.each(jqXHR.responseJSON.errors, function (field_name, error) {\n        message += '<b>' + field_name + '</b>: ' + jqXHR.responseJSON.errors[field_name][0] + '<br>';\n      });\n      $.alert({\n        title: 'Field invalid',\n        content: message\n      });\n    });\n  });\n  $('select[name=\"unit_id\"]').on('change', function (e) {\n    e.preventDefault();\n    unitID = $(this).val();\n    if (unitID) {\n      populate_category(unitID);\n    } else {\n      $('select[name=\"sale_unit_id\"]').empty();\n      $('select[name=\"purchase_unit_id\"]').empty();\n    }\n  });\n  function hide() {\n    $(\"#cost\").hide(300);\n    $(\"#unit\").hide(300);\n    $(\"#alert-qty\").hide(300);\n  }\n  function populate_category(unitID) {\n    var url = 'api/product/saleunit/' + unitID;\n    $.ajax({\n      url: host + '/' + url,\n      type: \"GET\",\n      dataType: \"json\",\n      success: function success(data) {\n        $('select[name=\"sale_unit_id\"]').empty();\n        $('select[name=\"purchase_unit_id\"]').empty();\n        $.each(data, function (key, value) {\n          $('select[name=\"sale_unit_id\"]').append('<option value=\"' + key + '\">' + value + '</option>');\n          $('select[name=\"purchase_unit_id\"]').append('<option value=\"' + key + '\">' + value + '</option>');\n        });\n        //   $('.selectpicker').selectpicker('refresh');\n      }\n    });\n  }\n  $(\"#promotion\").on(\"change\", function () {\n    if ($(this).is(':checked')) {\n      // $.datepicker.formatDate('dd/mm/yy', new Date())\n      $(\"#starting_date\").val();\n      $(\"#promotion_price\").show(300);\n      $(\"#start_date\").show(300);\n      $(\"#last_date\").show(300);\n    } else {\n      $(\"#promotion_price\").hide(300);\n      $(\"#start_date\").hide(300);\n      $(\"#last_date\").hide(300);\n    }\n  });\n  var starting_date = $('#starting_date');\n  starting_date.daterangepicker({\n    singleDatePicker: true,\n    showDropdowns: true,\n    minYear: 1901,\n    locale: {\n      format: 'DD/MM/YYYY'\n    }\n  });\n  var ending_date = $('#ending_date');\n  ending_date.daterangepicker({\n    singleDatePicker: true,\n    showDropdowns: true,\n    minYear: 1901,\n    locale: {\n      format: 'DD/MM/YYYY'\n    }\n  });\n  $(window).keydown(function (e) {\n    if (e.which == 13) {\n      var $targ = $(e.target);\n      if (!$targ.is(\"textarea\") && !$targ.is(\":button,:submit\")) {\n        var focusNext = false;\n        $(this).find(\":input:visible:not([disabled],[readonly]), a\").each(function () {\n          if (this === e.target) {\n            focusNext = true;\n          } else if (focusNext) {\n            $(this).focus();\n            return false;\n          }\n        });\n        return false;\n      }\n    }\n  });\n\n  //dropzone portion\n  Dropzone.autoDiscover = false;\n  jQuery.validator.setDefaults({\n    errorPlacement: function errorPlacement(error, element) {\n      if (error.html() == 'Select Category...') error.html('This field is required.');\n      $(element).closest('div.form-group').find('.validation-msg').html(error.html());\n    },\n    highlight: function highlight(element) {\n      $(element).closest('div.form-group').removeClass('has-success').addClass('has-error');\n    },\n    unhighlight: function unhighlight(element, errorClass, validClass) {\n      $(element).closest('div.form-group').removeClass('has-error').addClass('has-success');\n      $(element).closest('div.form-group').find('.validation-msg').html('');\n    }\n  });\n  $.validator.addMethod(\"requiredIfChecked\", function (value, element) {\n    // Check if checkbox is checked and date is empty\n    if ($('#promotion').prop('checked') && value === '') {\n      return false; // Return false to indicate validation failure\n    }\n    return true; // Return true if validation passes\n  }, \"Date is required if checkbox is checked.\");\n  $(\"#product-form\").validate({\n    rules: {\n      name: 'required',\n      code: {\n        required: true,\n        remote: {\n          url: 'code',\n          type: 'get',\n          delay: 1000,\n          message: 'The pageurl is not available.'\n        }\n      },\n      brand_id: 'required',\n      promotion_price: {\n        requiredIfChecked: true,\n        required: true\n      }\n    },\n    onfocusout: false,\n    invalidHandler: function invalidHandler(form, validator) {\n      var errors = validator.numberOfInvalids();\n      if (errors) {\n        validator.errorList[0].element.focus();\n      }\n    },\n    highlight: function highlight(input) {\n      $(input).addClass('is-invalid');\n    },\n    unhighlight: function unhighlight(input) {\n      $(input).removeClass('is-invalid');\n    },\n    errorElement: 'span',\n    errorPlacement: function errorPlacement(error, element) {\n      error.addClass('invalid-feedback');\n      element.closest('.form-group').append(error);\n    },\n    // errorPlacement: function ( error, element ) {\n    //     // Add the `invalid-feedback` class to the error element\n    //     error.addClass(\"invalid-feedback\");\n    //     error.insertAfter(element);\n    // },\n    messages: {\n      name: 'The name is required',\n      code: {\n        required: 'The code is required',\n        remote: \"code already in use.\"\n      },\n      brand_id: 'The brand is required',\n      promotion_price: {\n        required: 'The promition price is required'\n      }\n    }\n  });\n  function validate() {\n    var product_code = $(\"input[name='code']\").val();\n    var barcode_symbology = $('select[name=\"barcode_symbology\"]').val();\n    var exp = /^\\d+$/;\n    if (!product_code.match(exp) && (barcode_symbology == 'UPCA' || barcode_symbology == 'UPCE' || barcode_symbology == 'EAN8' || barcode_symbology == 'EAN13')) {\n      alert('Product code must be numeric.');\n      return false;\n    } else if (product_code.match(exp)) {\n      if (barcode_symbology == 'UPCA' && product_code.length > 11) {\n        alert('Product code length must be less than 12');\n        return false;\n      } else if (barcode_symbology == 'EAN8' && product_code.length > 7) {\n        alert('Product code length must be less than 8');\n        return false;\n      } else if (barcode_symbology == 'EAN13' && product_code.length > 12) {\n        alert('Product code length must be less than 13');\n        return false;\n      }\n    }\n    $(\"input[name='price']\").prop('disabled', false);\n    return true;\n  }\n  $(\".dropzone\").sortable({\n    items: '.dz-preview',\n    cursor: 'grab',\n    opacity: 0.5,\n    containment: '.dropzone',\n    distance: 20,\n    tolerance: 'pointer',\n    stop: function stop() {\n      var queue = myDropzone.getAcceptedFiles();\n      newQueue = [];\n      $('#imageUpload .dz-preview .dz-filename [data-dz-name]').each(function (count, el) {\n        var name = el.innerHTML;\n        queue.forEach(function (file) {\n          if (file.name === name) {\n            newQueue.push(file);\n          }\n        });\n      });\n      myDropzone.files = newQueue;\n    }\n  });\n  myDropzone = new Dropzone('div#imageUpload', {\n    addRemoveLinks: true,\n    autoProcessQueue: false,\n    uploadMultiple: true,\n    parallelUploads: 100,\n    maxFilesize: 12,\n    paramName: 'image',\n    clickable: true,\n    method: 'POST',\n    url: 'api/product',\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    renameFile: function renameFile(file) {\n      var dt = new Date();\n      var time = dt.getTime();\n      return time + file.name;\n    },\n    acceptedFiles: \".jpeg,.jpg,.png,.gif\",\n    init: function init() {\n      var myDropzone = this;\n      $('#submit-btn').on(\"click\", function (e) {\n        e.preventDefault();\n        if ($(\"#product-form\").valid() && validate()) {\n          tinyMCE.triggerSave();\n          if (myDropzone.getAcceptedFiles().length) {\n            myDropzone.processQueue();\n          } else {\n            $.ajax({\n              type: 'POST',\n              url: host + \"/api/product\",\n              data: $(\"#product-form\").serialize(),\n              success: function success(response) {\n                $.confirm({\n                  title: 'Actualizar producto',\n                  content: 'El producto se ha creado con exito',\n                  buttons: {\n                    ok: function ok() {\n                      window.location.replace('/product');\n                    }\n                  }\n                });\n                //location.href = '../product';\n              },\n              error: function error(response) {\n                if (response.status == 422) {\n                  //toastError(err.responseJSON.message);\n                  var message = '';\n                  $.each(response.responseJSON.errors, function (field_name, error) {\n                    message += '<b>' + field_name + '</b>: ' + response.responseJSON.errors[field_name][0] + '<br>';\n                  });\n                  $.alert({\n                    title: 'Field invalid',\n                    content: message\n                  });\n                }\n              }\n            });\n          }\n        }\n      });\n      this.on('sending', function (file, xhr, formData) {\n        // Append all form inputs to the formData Dropzone will POST\n        var data = $(\"#product-form\").serializeArray();\n        $.each(data, function (key, el) {\n          formData.append(el.name, el.value);\n        });\n      });\n    },\n    error: function error(file, response) {\n      if (response.status == 422) {\n        //toastError(err.responseJSON.message);\n        // let details = response.responseJSON.errors ;\n        // let content = '';\n        // Object.keys(details).forEach(field => {\n        //     content += formatErrorUsingClassesAndPopover(field,details[field]);\n        // });\n\n        var message = '';\n        $.each(response.responseJSON.errors, function (field_name, error) {\n          // $('input[name=\"'+field_name+'\"]').addClass('is-invalid');\n          // let html = '<label id=\"name-error\" class=\"error invalid-feedback\" for=\"name\" style=\"\">'+response.responseJSON.errors[field_name][0]+'</label>';\n          // $('input[name=\"'+field_name+'\"]').after(html);\n          message += '<b>' + field_name + '</b>: ' + response.responseJSON.errors[field_name][0] + '<b>';\n        });\n        $.alert({\n          title: 'Field invalid',\n          content: message\n        });\n      }\n      // console.log(response);\n      // if(response.errors.name) {\n      //   $(\"#name-error\").text(response.errors.name);\n      //   this.removeAllFiles(true);\n      // }\n      // else if(response.errors.code) {\n      //   $(\"#code-error\").text(response.errors.code);\n      //   this.removeAllFiles(true);\n      // }\n      // else {\n      //   try {\n      //       var res = JSON.parse(response);\n      //       if (typeof res.message !== 'undefined' && !$modal.hasClass('in')) {\n      //           $(\"#success-icon\").attr(\"class\", \"fas fa-thumbs-down\");\n      //           $(\"#success-text\").html(res.message);\n      //           $modal.modal(\"show\");\n      //       } else {\n      //           if ($.type(response) === \"string\")\n      //               var message = response; //dropzone sends it's own error messages in string\n      //           else\n      //               var message = response.message;\n      //           file.previewElement.classList.add(\"dz-error\");\n      //           _ref = file.previewElement.querySelectorAll(\"[data-dz-errormessage]\");\n      //           _results = [];\n      //           for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      //               node = _ref[_i];\n      //               _results.push(node.textContent = message);\n      //           }\n      //           return _results;\n      //       }\n      //   } catch (error) {\n      //       console.log(error);\n      //   }\n      // }\n    },\n    successmultiple: function successmultiple(file, response) {\n      $.confirm({\n        title: 'Agregar producto',\n        content: 'El producto se ha creado con exito',\n        autoClose: 'ok|3000',\n        buttons: {\n          ok: function ok() {\n            window.location.replace('/product');\n          }\n        }\n      });\n      //location.href = '../product';\n      //console.log(file, response);\n    },\n    completemultiple: function completemultiple(file, response) {\n      console.log(file, response, \"completemultiple\");\n    },\n    reset: function reset() {\n      console.log(\"resetFiles\");\n      this.removeAllFiles(true);\n    }\n  });\n  var load_combobox = function load_combobox(input) {\n    $(input).append('<option value=\"\">Select suppliers</option>');\n    $.ajax({\n      processData: false,\n      contentType: false,\n      dataType: 'json',\n      type: \"GET\",\n      url: host + '/api/suppliers/all/combobox',\n      success: function success(response) {\n        if (response.length != 0) {\n          $.each(response, function (index, row) {\n            $(input).append('<option value=' + row.id + '>' + row.name + '</option>');\n          });\n        }\n      },\n      error: function error(xhr, textStatus, _error) {}\n    });\n  };\n  $(document).ready(function () {\n    load_combobox(\".select-supplier\");\n  });\n  $('select[name=\"supplier_id\"]').on('change', function (e) {\n    e.preventDefault();\n    supplier_id = $(this).val();\n    if (supplier_id) {\n      brandsBySupplier(supplier_id);\n    } else {\n      $('select[name=\"supplier_id\"]').empty();\n    }\n  });\n  function brandsBySupplier(supplier_id) {\n    var url = 'api/brand/supplier/' + supplier_id;\n    $('select[name=\"brand_id\"]').empty();\n    $('select[name=\"brand_id\"]').append('<option value=\"\">Select brand</option>');\n    $.ajax({\n      url: host + '/' + url,\n      type: \"GET\",\n      dataType: \"json\",\n      success: function success(response) {\n        $.each(response, function (index, row) {\n          $('select[name=\"brand_id\"]').append('<option value=' + row.id + '>' + row.name + '</option>');\n        });\n      }\n    });\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/modules/product/create.js\n");

/***/ }),

/***/ 14:
/*!******************************************************!*\
  !*** multi ./resources/js/modules/product/create.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /usr/local/var/www/practica/resources/js/modules/product/create.js */"./resources/js/modules/product/create.js");


/***/ })

/******/ });